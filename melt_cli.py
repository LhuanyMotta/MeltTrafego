#!/usr/bin/env python3
"""
MeltTrafego - Analisador de Tr√°fego de Rede Multiplataforma
Vers√£o CLI Melhorada (adaptada para Linux)
"""

import os
import sys
import time
import json
import threading
import argparse
import socket
from datetime import datetime
import psutil

# scapy imports
try:
    from scapy.all import sniff
    from scapy.layers.inet import IP, TCP, UDP, ICMP
except Exception:
    # Import error will be raised at runtime if scapy not installed
    sniff = None
    IP = TCP = UDP = ICMP = None

import pandas as pd

# Corrigir encoding no Windows (mantido, mas n√£o relevante para Linux)
if sys.platform == "win32":
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer)


class MeltTrafegoCLI:
    def __init__(self):
        self.dados_captura = []
        self.estatisticas = {}
        self.interface_atual = None
        self.captura_ativa = False
        self.arquivo_captura = None
        self.mostrar_tempo_real = False

    def limpar_tela(self):
        os.system('cls' if os.name == 'nt' else 'clear')

    def cabecalho(self):
        print("\n" + "=" * 50)
        print("üöÄ  MELTTR√ÅFEGO - ANALISADOR DE REDE  üåê")
        print("=" * 50)

    def menu_interativo(self):
        """Modo interativo com menu"""
        while True:
            self.limpar_tela()
            self.cabecalho()
            print("\n1Ô∏è‚É£  Listar interfaces dispon√≠veis")
            print("2Ô∏è‚É£  Monitorar tr√°fego (30s) - Tempo Real")
            print("3Ô∏è‚É£  An√°lise completa (60s captura + relat√≥rio)")
            print("4Ô∏è‚É£  Estat√≠sticas do √∫ltimo relat√≥rio")
            print("5Ô∏è‚É£  Exportar relat√≥rio completo")
            print("6Ô∏è‚É£  Sair")

            opcao = input("\nüìã Digite o n√∫mero da op√ß√£o (1-6): ").strip()

            if opcao == "1":
                self.listar_interfaces()
            elif opcao == "2":
                self.monitorar_tempo_real()
            elif opcao == "3":
                self.analise_completa()
            elif opcao == "4":
                self.mostrar_estatisticas()
            elif opcao == "5":
                self.exportar_relatorio()
            elif opcao == "6":
                print("\nüëã Saindo do MeltTrafego... At√© logo!")
                break
            else:
                print("\n‚ùå Op√ß√£o inv√°lida! Tente novamente.")
                time.sleep(2)

    def listar_interfaces(self):
        """Lista todas as interfaces de rede dispon√≠veis"""
        self.limpar_tela()
        self.cabecalho()
        print("\nüì° INTERFACES DE REDE DISPON√çVEIS:\n")

        try:
            interfaces = psutil.net_if_addrs()
            stats = psutil.net_if_stats()

            for i, (interface, addrs) in enumerate(interfaces.items(), 1):
                status = "‚úÖ ATIVA" if interface in stats and stats[interface].isup else "‚ùå INATIVA"
                print(f"{i}. {interface} - {status}")

                # Mostrar endere√ßos IP
                for addr in addrs:
                    if addr.family == socket.AF_INET:  # IPv4
                        print(f"   üìç IPv4: {addr.address}")
                    elif addr.family == socket.AF_INET6:  # IPv6
                        print(f"   üìç IPv6: {addr.address}")
                print()

        except Exception as e:
            print(f"‚ùå Erro ao listar interfaces: {e}")

        input("\nüìù Pressione Enter para continuar...")

    def processar_pacote(self, pacote):
        """Processa cada pacote capturado"""
        if not self.captura_ativa:
            return

        timestamp = datetime.now()
        info = {
            'timestamp': timestamp,
            'tamanho': len(pacote)
        }

        # An√°lise de camadas
        if IP and pacote.haslayer(IP):
            info['ip_origem'] = pacote[IP].src
            info['ip_destino'] = pacote[IP].dst
            info['protocolo'] = pacote[IP].proto

            if pacote.haslayer(TCP):
                info['porta_origem'] = int(pacote[TCP].sport)
                info['porta_destino'] = int(pacote[TCP].dport)
                info['tipo'] = 'TCP'
            elif pacote.haslayer(UDP):
                info['porta_origem'] = int(pacote[UDP].sport)
                info['porta_destino'] = int(pacote[UDP].dport)
                info['tipo'] = 'UDP'
            elif pacote.haslayer(ICMP):
                info['tipo'] = 'ICMP'
            else:
                info['tipo'] = 'Outro'
        else:
            info['tipo'] = 'N√£o-IP'

        self.dados_captura.append(info)

        # Mostrar pacote em tempo real se estiver no modo monitoramento
        if self.mostrar_tempo_real:
            print(f"üì¶ {timestamp.strftime('%H:%M:%S')} | {info['tipo']} | {info.get('ip_origem', 'N/A')} ‚Üí {info.get('ip_destino', 'N/A')} | {info['tamanho']} bytes")

    def capturar_trafego(self, duracao, interface=None):
        """Captura tr√°fego por um per√≠odo determinado"""
        if sniff is None:
            print("‚ùå Scapy n√£o dispon√≠vel. Instale com: pip install scapy")
            return

        self.dados_captura = []
        self.captura_ativa = True

        print(f"\nüéØ Capturando tr√°fego por {duracao} segundos...")

        # Thread para parar captura ap√≥s o tempo
        def parar_captura():
            time.sleep(duracao)
            self.captura_ativa = False

        thread_parada = threading.Thread(target=parar_captura)
        thread_parada.start()

        try:
            # Captura pacotes
            if interface:
                sniff(prn=self.processar_pacote, timeout=duracao, iface=interface)
            else:
                sniff(prn=self.processar_pacote, timeout=duracao)

        except Exception as e:
            print(f"‚ùå Erro na captura: {e}")
            self.captura_ativa = False

        thread_parada.join()

    def analisar_dados(self):
        """Analisa os dados capturados e gera estat√≠sticas"""
        if not self.dados_captura:
            return None

        df = pd.DataFrame(self.dados_captura)

        estatisticas = {
            'total_pacotes': int(len(df)),
            'periodo_captura': {
                'inicio': df['timestamp'].min(),
                'fim': df['timestamp'].max(),
                'duracao': (df['timestamp'].max() - df['timestamp'].min()).total_seconds()
            },
            'tamanho_pacotes': {
                'total_bytes': int(df['tamanho'].sum()),
                'media_bytes': float(df['tamanho'].mean()),
                'maior_pacote': int(df['tamanho'].max()),
                'menor_pacote': int(df['tamanho'].min())
            },
            'tipos_trafego': df['tipo'].value_counts().to_dict(),
            'top_ips_origem': df['ip_origem'].value_counts().head(5).to_dict() if 'ip_origem' in df.columns else {},
            'top_ips_destino': df['ip_destino'].value_counts().head(5).to_dict() if 'ip_destino' in df.columns else {},
            'top_portas': {}
        }

        # Estat√≠sticas de portas se dispon√≠veis
        if 'porta_origem' in df.columns:
            estatisticas['top_portas']['origem'] = df['porta_origem'].value_counts().head(5).to_dict()
        if 'porta_destino' in df.columns:
            estatisticas['top_portas']['destino'] = df['porta_destino'].value_counts().head(5).to_dict()

        return estatisticas

    def monitorar_tempo_real(self):
        """Monitora tr√°fego em tempo real por 30 segundos"""
        self.limpar_tela()
        self.cabecalho()
        print("\nüìä MODO MONITORAMENTO TEMPO REAL (30s)\n")
        print("üì¶ Mostrando pacotes em tempo real...\n")

        # Ativar modo tempo real
        self.mostrar_tempo_real = True

        try:
            self.capturar_trafego(30)
            self.mostrar_tempo_real = False
            self.estatisticas = self.analisar_dados()

            if self.estatisticas:
                print(f"\n‚úÖ Captura conclu√≠da! {self.estatisticas['total_pacotes']} pacotes capturados.")
            else:
                print("\n‚ùå Nenhum dado foi capturado.")

        except Exception as e:
            print(f"‚ùå Erro no monitoramento: {e}")
            self.mostrar_tempo_real = False

        input("\nüìù Pressione Enter para continuar...")

    def analise_completa(self):
        """Realiza an√°lise completa por 60 segundos"""
        self.limpar_tela()
        self.cabecalho()
        print("\nüîç AN√ÅLISE COMPLETA (60s)\n")

        try:
            print("‚è≥ Iniciando captura de 60 segundos...")
            self.capturar_trafego(60)
            print("üìà Analisando dados capturados...")
            self.estatisticas = self.analisar_dados()

            if self.estatisticas:
                print("\n‚úÖ An√°lise conclu√≠da!")
                self.mostrar_estatisticas(aguardar=False)
            else:
                print("\n‚ùå Nenhum dado foi capturado durante a an√°lise.")

        except Exception as e:
            print(f"‚ùå Erro na an√°lise completa: {e}")

        input("\nüìù Pressione Enter para continuar...")

    def mostrar_estatisticas(self, aguardar=True):
        """Mostra estat√≠sticas do √∫ltimo relat√≥rio"""
        self.limpar_tela()
        self.cabecalho()
        print("\nüìà ESTAT√çSTICAS DO √öLTIMO RELAT√ìRIO\n")

        if not self.estatisticas:
            print("‚ùå Nenhum relat√≥rio dispon√≠vel. Execute uma captura primeiro.")
            if aguardar:
                input("\nüìù Pressione Enter para continuar...")
            return

        stats = self.estatisticas

        print(f"üì¶ TOTAL DE PACOTES: {stats['total_pacotes']:,}")
        print(f"‚è∞ DURA√á√ÉO: {stats['periodo_captura']['duracao']:.1f}s")
        print(f"üìä TOTAL DE BYTES: {stats['tamanho_pacotes']['total_bytes']:,}")
        print(f"üìè M√âDIA POR PACOTE: {stats['tamanho_pacotes']['media_bytes']:.1f} bytes")
        print(f"üìà MAIOR PACOTE: {stats['tamanho_pacotes']['maior_pacote']} bytes")
        print(f"üìâ MENOR PACOTE: {stats['tamanho_pacotes']['menor_pacote']} bytes")

        print("\nüö¶ TIPOS DE TR√ÅFEGO:")
        for tipo, quantidade in stats['tipos_trafego'].items():
            print(f"   ‚Ä¢ {tipo}: {quantidade}")

        if stats['top_ips_origem']:
            print("\nüåê TOP IPs DE ORIGEM:")
            for ip, count in stats['top_ips_origem'].items():
                print(f"   ‚Ä¢ {ip}: {count} pacotes")

        if stats['top_ips_destino']:
            print("\nüéØ TOP IPs DE DESTINO:")
            for ip, count in stats['top_ips_destino'].items():
                print(f"   ‚Ä¢ {ip}: {count} pacotes")

        if aguardar:
            input("\nüìù Pressione Enter para continuar...")

    def exportar_relatorio(self):
        """Exporta relat√≥rio completo para arquivo"""
        self.limpar_tela()
        self.cabecalho()
        print("\nüíæ EXPORTAR RELAT√ìRIO\n")

        if not self.estatisticas:
            print("‚ùå Nenhum relat√≥rio dispon√≠vel para exportar.")
            input("\nüìù Pressione Enter para continuar...")
            return

        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"relatorio_trafego_{timestamp}"

            # Exportar como JSON
            with open(f"{filename}.json", 'w', encoding='utf-8') as f:
                json.dump(self.estatisticas, f, indent=2, default=str)

            # Exportar como CSV se houver dados
            if self.dados_captura:
                df = pd.DataFrame(self.dados_captura)
                df.to_csv(f"{filename}.csv", index=False, encoding='utf-8')

            print(f"‚úÖ Relat√≥rio exportado com sucesso!")
            print(f"üìÅ Arquivos criados:")
            print(f"   ‚Ä¢ {filename}.json")
            if self.dados_captura:
                print(f"   ‚Ä¢ {filename}.csv")

        except Exception as e:
            print(f"‚ùå Erro ao exportar relat√≥rio: {e}")

        input("\nüìù Pressione Enter para continuar...")

    def modo_captura(self, interface, tempo, output=None):
        """Modo de captura via linha de comando"""
        print(f"üéØ Capturando tr√°fego na interface {interface} por {tempo}s...")

        if output:
            self.arquivo_captura = output

        self.capturar_trafego(tempo, interface)

        if self.dados_captura:
            self.estatisticas = self.analisar_dados()
            print(f"‚úÖ Captura conclu√≠da! {len(self.dados_captura)} pacotes capturados.")

            # Salvar automaticamente
            if not output:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                output = f"captura_{interface}_{timestamp}"

            self.salvar_captura(output)
        else:
            print("‚ùå Nenhum pacote capturado.")

    def salvar_captura(self, filename):
        """Salva a captura atual"""
        try:
            # Salvar dados brutos
            with open(f"{filename}_dados.json", 'w', encoding='utf-8') as f:
                # Converter timestamps para string
                dados_serializaveis = []
                for dado in self.dados_captura:
                    dado_serial = dado.copy()
                    dado_serial['timestamp'] = dado['timestamp'].isoformat()
                    dados_serializaveis.append(dado_serial)
                json.dump(dados_serializaveis, f, indent=2)

            # Salvar estat√≠sticas
            with open(f"{filename}_estatisticas.json", 'w', encoding='utf-8') as f:
                json.dump(self.estatisticas, f, indent=2, default=str)

            print(f"üíæ Captura salva como: {filename}_dados.json e {filename}_estatisticas.json")

        except Exception as e:
            print(f"‚ùå Erro ao salvar captura: {e}")

    def mostrar_status(self):
        """Mostra status do sistema"""
        self.limpar_tela()
        self.cabecalho()
        print("\nüìä STATUS DO SISTEMA\n")

        try:
            # Informa√ß√µes da rede
            interfaces = psutil.net_io_counters(pernic=True)
            print("üì° ESTAT√çSTICAS DE INTERFACES:")
            for interface, stats in interfaces.items():
                print(f"   ‚Ä¢ {interface}:")
                print(f"     ‚Üë Enviados: {stats.bytes_sent:,} bytes")
                print(f"     ‚Üì Recebidos: {stats.bytes_recv:,} bytes")
                print(f"     üì¶ Pacotes enviados: {stats.packets_sent:,}")
                print(f"     üì¶ Pacotes recebidos: {stats.packets_recv:,}")

            # Mem√≥ria
            memoria = psutil.virtual_memory()
            print(f"\nüíæ MEM√ìRIA: {memoria.percent}% utilizada")

            # CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            print(f"‚ö° CPU: {cpu_percent}% utilizada")

        except Exception as e:
            print(f"‚ùå Erro ao obter status: {e}")

        input("\nüìù Pressione Enter para continuar...")


def main():
    parser = argparse.ArgumentParser(
        description='MeltTrafego - An√°lise de Tr√°fego de Rede Multiblataforma',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=f'''
Exemplos:
{sys.argv[0]} --interativo          # Modo menu interativo
{sys.argv[0]} --capturar eth0 -t 30 # Capturar 30s na eth0
{sys.argv[0]} --interfaces          # Listar interfaces
{sys.argv[0]} --status              # Status do sistema
{sys.argv[0]} --capturar wlan0 -t 60 -o minha_captura

Desenvolvido para Windows, Linux e macOS
        '''
    )

    parser.add_argument('--interativo', action='store_true', help='Modo menu interativo')
    parser.add_argument('--capturar', type=str, help='Interface para captura')
    parser.add_argument('-t', '--tempo', type=int, default=30, help='Tempo de captura em segundos')
    parser.add_argument('-o', '--output', type=str, help='Arquivo de sa√≠da para captura')
    parser.add_argument('--interfaces', action='store_true', help='Listar interfaces')
    parser.add_argument('--status', action='store_true', help='Status do sistema')

    args = parser.parse_args()

    analisador = MeltTrafegoCLI()

    try:
        if args.interativo:
            analisador.menu_interativo()
        elif args.capturar:
            analisador.modo_captura(args.capturar, args.tempo, args.output)
        elif args.interfaces:
            analisador.listar_interfaces()
        elif args.status:
            analisador.mostrar_status()
        else:
            # Se nenhum argumento, mostrar ajuda
            parser.print_help()

    except KeyboardInterrupt:
        print("\n\nüëã Programa interrompido pelo usu√°rio.")
    except Exception as e:
        print(f"‚ùå Erro: {e}")


if __name__ == "__main__":
    main()
