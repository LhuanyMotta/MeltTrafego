#!/usr/bin/env python3
"""
MeltTrafego - Interface Gr√°fica Multiplataforma
Interface moderna para an√°lise de tr√°fego de rede
"""

import sys
import os
import platform
from datetime import datetime

# Configura√ß√£o multiplataforma
SISTEMA = platform.system()

# Verificar se estamos no ambiente virtual
venv_path = os.path.join(os.path.dirname(__file__), 'melt_venv')
if os.path.exists(venv_path):
    if SISTEMA == "Windows":
        activate_this = os.path.join(venv_path, 'Scripts', 'activate_this.py')
    else:
        activate_this = os.path.join(venv_path, 'bin', 'activate_this.py')
    
    if os.path.exists(activate_this):
        with open(activate_this) as f:
            exec(f.read(), {'__file__': activate_this})

try:
    from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                                QHBoxLayout, QPushButton, QLabel, QTextEdit, 
                                QComboBox, QSpinBox, QProgressBar, QTabWidget,
                                QGroupBox, QListWidget, QListWidgetItem, QMessageBox,
                                QSplitter, QFrame, QSystemTrayIcon, QMenu, QAction,
                                QStyle, QDialog, QDialogButtonBox, QFormLayout,
                                QLineEdit, QCheckBox, QFileDialog)
    from PyQt5.QtCore import QTimer, Qt, QThread, pyqtSignal
    from PyQt5.QtGui import QFont, QPalette, QColor, QIcon, QPixmap
except ImportError as e:
    print(f"‚ùå Erro: Depend√™ncias PyQt5 n√£o encontradas: {e}")
    print("üí° Instale com: pip install PyQt5")
    sys.exit(1)

try:
    from scapy.all import *
    import psutil
    import pandas as pd
except ImportError as e:
    print(f"‚ùå Erro: Depend√™ncias Python n√£o encontradas: {e}")
    print("üí° Instale com: pip install scapy psutil pandas")
    sys.exit(1)

class AnaliseThread(QThread):
    """Thread para an√°lise de arquivo em background"""
    analise_concluida = pyqtSignal(dict)
    erro_analise = pyqtSignal(str)
    
    def __init__(self, arquivo):
        super().__init__()
        self.arquivo = arquivo
        
    def run(self):
        """Executa a an√°lise do arquivo"""
        try:
            # Verificar se o arquivo existe
            if not os.path.exists(self.arquivo):
                self.erro_analise.emit(f"Arquivo n√£o encontrado: {self.arquivo}")
                return
            
            # Ler e analisar o arquivo
            with open(self.arquivo, 'r', encoding='utf-8', errors='ignore') as f:
                linhas = f.readlines()
            
            if not linhas:
                self.erro_analise.emit("Arquivo vazio ou sem dados v√°lidos")
                return
            
            # An√°lise b√°sica do arquivo
            total_linhas = len(linhas)
            tipos_linhas = {}
            ips_unicos = set()
            
            for linha in linhas:
                linha = linha.strip()
                if not linha:
                    continue
                
                # Classificar tipo de linha
                if 'TCP' in linha.upper():
                    tipo = 'TCP'
                elif 'UDP' in linha.upper():
                    tipo = 'UDP'
                elif 'ICMP' in linha.upper():
                    tipo = 'ICMP'
                elif 'IP' in linha:
                    tipo = 'IP'
                else:
                    tipo = 'Outro'
                
                tipos_linhas[tipo] = tipos_linhas.get(tipo, 0) + 1
                
                # Extrair IPs (busca simples)
                import re
                ips = re.findall(r'\b(?:\d{1,3}\.){3}\d{1,3}\b', linha)
                ips_unicos.update(ips)
            
            resultado = {
                'arquivo': self.arquivo,
                'total_linhas': total_linhas,
                'tipos_linhas': tipos_linhas,
                'ips_unicos': len(ips_unicos),
                'timestamp_analise': datetime.now().isoformat(),
                'tamanho_arquivo': os.path.getsize(self.arquivo)
            }
            
            self.analise_concluida.emit(resultado)
            
        except Exception as e:
            self.erro_analise.emit(f"Erro na an√°lise: {str(e)}")

class CapturaThread(QThread):
    """Thread para captura de pacotes em background - Multiplataforma"""
    pacote_capturado = pyqtSignal(dict)
    captura_finalizada = pyqtSignal(list)
    erro_captura = pyqtSignal(str)
    
    def __init__(self, interface, duracao):
        super().__init__()
        self.interface = interface
        self.duracao = duracao
        self.pacotes = []
        self.capturando = False
        self.sistema = platform.system()
        
    def processar_pacote(self, pacote):
        """Processa cada pacote capturado"""
        if not self.capturando:
            return
            
        info = {
            'timestamp': datetime.now(),
            'tamanho': len(pacote)
        }
        
        if pacote.haslayer(IP):
            info['ip_origem'] = pacote[IP].src
            info['ip_destino'] = pacote[IP].dst
            info['protocolo'] = pacote[IP].proto
            
            if pacote.haslayer(TCP):
                info['porta_origem'] = pacote[TCP].sport
                info['porta_destino'] = pacote[TCP].dport
                info['tipo'] = 'TCP'
                info['flags'] = str(pacote[TCP].flags)
            elif pacote.haslayer(UDP):
                info['porta_origem'] = pacote[UDP].sport
                info['porta_destino'] = pacote[UDP].dport
                info['tipo'] = 'UDP'
            elif pacote.haslayer(ICMP):
                info['tipo'] = 'ICMP'
            else:
                info['tipo'] = 'Outro'
        else:
            info['tipo'] = 'N√£o-IP'
        
        self.pacotes.append(info)
        self.pacote_capturado.emit(info)
    
    def run(self):
        """Executa a captura - Multiplataforma"""
        self.capturando = True
        self.pacotes = []
        
        try:
            # Configurar interface para Windows
            if self.sistema == "Windows" and self.interface == "any":
                interface_captura = None  # Scapy detecta automaticamente
            else:
                interface_captura = self.interface
            
            # Configurar filtro
            filter_str = "ip or ip6"
            
            # Capturar pacotes
            sniff(prn=self.processar_pacote, timeout=self.duracao, 
                  iface=interface_captura, filter=filter_str)
                
            self.capturando = False
            self.captura_finalizada.emit(self.pacotes)
            
        except PermissionError as e:
            self.capturando = False
            if self.sistema == "Linux":
                mensagem_erro = (
                    "Erro de permiss√£o. Execute com sudo ou configure permiss√µes:\n"
                    "sudo setcap cap_net_raw,cap_net_admin=eip $(which python3)"
                )
            else:
                mensagem_erro = (
                    "Erro de permiss√£o no Windows.\n"
                    "Execute como Administrador ou verifique a instala√ß√£o do Npcap."
                )
            self.erro_captura.emit(mensagem_erro)
        except Exception as e:
            self.capturando = False
            self.erro_captura.emit(f"Erro na captura: {str(e)}")

class MeltTrafegoGUI(QMainWindow):
    """Interface gr√°fica principal do MeltTrafego - Multiplataforma"""
    
    def __init__(self):
        super().__init__()
        self.captura_thread = None
        self.analise_thread = None
        self.dados_captura = []
        self.interface_atual = None
        self.sistema = platform.system()
        self.init_ui()
        
    def init_ui(self):
        """Inicializa a interface do usu√°rio"""
        titulo = "üöÄ MeltTrafego - Analisador de Tr√°fego"
        if self.sistema == "Windows":
            titulo += " Windows"
        else:
            titulo += " Linux"
            
        self.setWindowTitle(titulo)
        self.setGeometry(100, 100, 1200, 800)
        
        # Widget central
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Layout principal
        layout = QVBoxLayout(central_widget)
        
        # Barra superior
        self.criar_barra_superior(layout)
        
        # Divisor
        layout.addWidget(self.criar_divisor())
        
        # √Årea principal com abas
        self.criar_abas_principal(layout)
        
        # Barra de status
        self.criar_barra_status(layout)
        
        # Timer para atualiza√ß√µes em tempo real
        self.timer = QTimer()
        self.timer.timeout.connect(self.atualizar_status_sistema)
        self.timer.start(2000)  # Atualizar a cada 2 segundos
        
        # Atualizar interfaces dispon√≠veis
        self.atualizar_interfaces()
        
    def criar_barra_superior(self, layout):
        """Cria a barra superior de controle"""
        grupo_controles = QGroupBox("üéØ Controles de Captura")
        layout_controles = QHBoxLayout()
        
        # Sele√ß√£o de interface
        layout_controles.addWidget(QLabel("üì° Interface:"))
        self.combo_interfaces = QComboBox()
        self.combo_interfaces.setMinimumWidth(200)
        layout_controles.addWidget(self.combo_interfaces)
        
        # Tempo de captura
        layout_controles.addWidget(QLabel("‚è∞ Tempo (s):"))
        self.spin_tempo = QSpinBox()
        self.spin_tempo.setRange(5, 3600)
        self.spin_tempo.setValue(60)
        self.spin_tempo.setMinimumWidth(80)
        layout_controles.addWidget(self.spin_tempo)
        
        # Bot√µes de a√ß√£o
        self.btn_capturar = QPushButton("üé¨ Iniciar Captura")
        self.btn_capturar.clicked.connect(self.iniciar_captura)
        self.btn_capturar.setStyleSheet("QPushButton { background-color: #4CAF50; color: white; font-weight: bold; padding: 8px; border-radius: 4px; }")
        layout_controles.addWidget(self.btn_capturar)
        
        self.btn_parar = QPushButton("‚èπÔ∏è Parar")
        self.btn_parar.clicked.connect(self.parar_captura)
        self.btn_parar.setEnabled(False)
        self.btn_parar.setStyleSheet("QPushButton { background-color: #f44336; color: white; padding: 8px; border-radius: 4px; }")
        layout_controles.addWidget(self.btn_parar)
        
        self.btn_limpar = QPushButton("üóëÔ∏è Limpar")
        self.btn_limpar.clicked.connect(self.limpar_dados)
        self.btn_limpar.setStyleSheet("QPushButton { background-color: #FF9800; color: white; padding: 8px; border-radius: 4px; }")
        layout_controles.addWidget(self.btn_limpar)
        
        self.btn_analisar = QPushButton("üîç Analisar Arquivo")
        self.btn_analisar.clicked.connect(self.analisar_arquivo)
        self.btn_analisar.setStyleSheet("QPushButton { background-color: #2196F3; color: white; padding: 8px; border-radius: 4px; }")
        layout_controles.addWidget(self.btn_analisar)
        
        # Bot√£o de informa√ß√µes da plataforma
        self.btn_plataforma = QPushButton(f"üíª {self.sistema}")
        self.btn_plataforma.clicked.connect(self.mostrar_info_plataforma)
        self.btn_plataforma.setStyleSheet("QPushButton { background-color: #9C27B0; color: white; padding: 8px; border-radius: 4px; }")
        layout_controles.addWidget(self.btn_plataforma)
        
        layout_controles.addStretch()
        
        grupo_controles.setLayout(layout_controles)
        layout.addWidget(grupo_controles)
    
    def criar_divisor(self):
        """Cria um divisor visual"""
        linha = QFrame()
        linha.setFrameShape(QFrame.HLine)
        linha.setFrameShadow(QFrame.Sunken)
        return linha
    
    def criar_abas_principal(self, layout):
        """Cria as abas principais da aplica√ß√£o"""
        self.tabs = QTabWidget()
        
        # Aba: Monitoramento em Tempo Real
        self.criar_aba_tempo_real()
        
        # Aba: Estat√≠sticas
        self.criar_aba_estatisticas()
        
        # Aba: Conex√µes
        self.criar_aba_conexoes()
        
        # Aba: Sistema
        self.criar_aba_sistema()
        
        layout.addWidget(self.tabs)
    
    def criar_aba_tempo_real(self):
        """Cria a aba de monitoramento em tempo real"""
        aba = QWidget()
        layout = QVBoxLayout(aba)
        
        # √Årea de logs em tempo real
        grupo_logs = QGroupBox("üìä Tr√°fego em Tempo Real")
        layout_logs = QVBoxLayout()
        
        self.texto_logs = QTextEdit()
        self.texto_logs.setMaximumHeight(300)
        self.texto_logs.setFont(QFont("Monospace", 9))
        layout_logs.addWidget(self.texto_logs)
        
        # Contadores
        layout_contadores = QHBoxLayout()
        
        self.label_contador_pacotes = QLabel("üì¶ Pacotes: 0")
        self.label_contador_tcp = QLabel("üîó TCP: 0")
        self.label_contador_udp = QLabel("üì® UDP: 0")
        self.label_contador_icmp = QLabel("üì° ICMP: 0")
        self.label_taxa_transferencia = QLabel("‚ö° Taxa: 0 B/s")
        
        layout_contadores.addWidget(self.label_contador_pacotes)
        layout_contadores.addWidget(self.label_contador_tcp)
        layout_contadores.addWidget(self.label_contador_udp)
        layout_contadores.addWidget(self.label_contador_icmp)
        layout_contadores.addWidget(self.label_taxa_transferencia)
        layout_contadores.addStretch()
        
        layout_logs.addLayout(layout_contadores)
        grupo_logs.setLayout(layout_logs)
        layout.addWidget(grupo_logs)
        
        # Alertas
        grupo_alertas = QGroupBox("‚ö†Ô∏è Alertas e Detec√ß√µes")
        layout_alertas = QVBoxLayout()
        
        self.lista_alertas = QListWidget()
        layout_alertas.addWidget(self.lista_alertas)
        
        grupo_alertas.setLayout(layout_alertas)
        layout.addWidget(grupo_alertas)
        
        self.tabs.addTab(aba, "üéØ Tempo Real")
        
        # Inicializar contadores
        self.contadores = {
            'total': 0,
            'tcp': 0,
            'udp': 0,
            'icmp': 0,
            'outros': 0
        }
        self.ultimo_timestamp = None
        self.bytes_total = 0
    
    def criar_aba_estatisticas(self):
        """Cria a aba de estat√≠sticas"""
        aba = QWidget()
        layout = QVBoxLayout(aba)
        
        # Estat√≠sticas gerais
        grupo_estatisticas = QGroupBox("üìà Estat√≠sticas Gerais")
        layout_estatisticas = QVBoxLayout()
        
        self.texto_estatisticas = QTextEdit()
        self.texto_estatisticas.setFont(QFont("Monospace", 10))
        layout_estatisticas.addWidget(self.texto_estatisticas)
        
        grupo_estatisticas.setLayout(layout_estatisticas)
        layout.addWidget(grupo_estatisticas)
        
        # Bot√µes de exporta√ß√£o
        layout_botoes = QHBoxLayout()
        
        btn_exportar_json = QPushButton("üíæ Exportar JSON")
        btn_exportar_json.clicked.connect(lambda: self.exportar_relatorio('json'))
        btn_exportar_json.setStyleSheet("QPushButton { background-color: #4CAF50; color: white; padding: 6px; border-radius: 4px; }")
        layout_botoes.addWidget(btn_exportar_json)
        
        btn_exportar_csv = QPushButton("üìä Exportar CSV")
        btn_exportar_csv.clicked.connect(lambda: self.exportar_relatorio('csv'))
        btn_exportar_csv.setStyleSheet("QPushButton { background-color: #2196F3; color: white; padding: 6px; border-radius: 4px; }")
        layout_botoes.addWidget(btn_exportar_csv)
        
        btn_gerar_relatorio = QPushButton("üìã Gerar Relat√≥rio")
        btn_gerar_relatorio.clicked.connect(self.gerar_relatorio_completo)
        btn_gerar_relatorio.setStyleSheet("QPushButton { background-color: #FF9800; color: white; padding: 6px; border-radius: 4px; }")
        layout_botoes.addWidget(btn_gerar_relatorio)
        
        layout_botoes.addStretch()
        layout.addLayout(layout_botoes)
        
        self.tabs.addTab(aba, "üìä Estat√≠sticas")
    
    def criar_aba_conexoes(self):
        """Cria a aba de conex√µes ativas"""
        aba = QWidget()
        layout = QVBoxLayout(aba)
        
        # Lista de conex√µes
        grupo_conexoes = QGroupBox("üîó Conex√µes de Rede")
        layout_conexoes = QVBoxLayout()
        
        self.lista_conexoes = QListWidget()
        layout_conexoes.addWidget(self.lista_conexoes)
        
        # Bot√£o para atualizar conex√µes
        btn_atualizar = QPushButton("üîÑ Atualizar Conex√µes")
        btn_atualizar.clicked.connect(self.atualizar_conexoes)
        btn_atualizar.setStyleSheet("QPushButton { background-color: #2196F3; color: white; padding: 8px; border-radius: 4px; }")
        layout_conexoes.addWidget(btn_atualizar)
        
        grupo_conexoes.setLayout(layout_conexoes)
        layout.addWidget(grupo_conexoes)
        
        self.tabs.addTab(aba, "üîó Conex√µes")
    
    def criar_aba_sistema(self):
        """Cria a aba de informa√ß√µes do sistema"""
        aba = QWidget()
        layout = QVBoxLayout(aba)
        
        # Informa√ß√µes da rede
        grupo_rede = QGroupBox("üåê Informa√ß√µes de Rede")
        layout_rede = QVBoxLayout()
        
        self.texto_info_rede = QTextEdit()
        self.texto_info_rede.setFont(QFont("Monospace", 9))
        layout_rede.addWidget(self.texto_info_rede)
        
        grupo_rede.setLayout(layout_rede)
        layout.addWidget(grupo_rede)
        
        # Estat√≠sticas do sistema
        grupo_sistema = QGroupBox("üíª Estat√≠sticas do Sistema")
        layout_sistema = QVBoxLayout()
        
        self.texto_info_sistema = QTextEdit()
        self.texto_info_sistema.setFont(QFont("Monospace", 9))
        layout_sistema.addWidget(self.texto_info_sistema)
        
        grupo_sistema.setLayout(layout_sistema)
        layout.addWidget(grupo_sistema)
        
        self.tabs.addTab(aba, "üíª Sistema")
    
    def criar_barra_status(self, layout):
        """Cria a barra de status"""
        grupo_status = QGroupBox("üìä Status")
        layout_status = QHBoxLayout()
        
        plataforma_text = f"üíª {self.sistema} | "
        self.label_status = QLabel(plataforma_text + "üü¢ Pronto para capturar")
        self.barra_progresso = QProgressBar()
        self.barra_progresso.setVisible(False)
        
        layout_status.addWidget(self.label_status)
        layout_status.addWidget(self.barra_progresso)
        layout_status.addStretch()
        
        grupo_status.setLayout(layout_status)
        layout.addWidget(grupo_status)
    
    def analisar_arquivo(self):
        """Abre di√°logo para selecionar e analisar arquivo"""
        arquivo, _ = QFileDialog.getOpenFileName(
            self,
            "üîç Selecionar arquivo para an√°lise",
            "",
            "Todos os arquivos (*.*);;Arquivos de texto (*.txt *.log);;Arquivos CSV (*.csv);;Arquivos JSON (*.json)"
        )
        
        if arquivo:
            self.label_status.setText(f"üîç Analisando arquivo: {os.path.basename(arquivo)}...")
            
            # Iniciar thread de an√°lise
            self.analise_thread = AnaliseThread(arquivo)
            self.analise_thread.analise_concluida.connect(self.analise_concluida)
            self.analise_thread.erro_analise.connect(self.mostrar_erro)
            self.analise_thread.start()
    
    def analise_concluida(self, resultado):
        """Callback quando a an√°lise √© conclu√≠da"""
        # Mostrar resultados na aba de estat√≠sticas
        relatorio = f"""üîç RELAT√ìRIO DE AN√ÅLISE DE ARQUIVO

üìÅ Arquivo: {resultado['arquivo']}
üìä Tamanho: {resultado['tamanho_arquivo']:,} bytes
üìà Total de linhas: {resultado['total_linhas']:,}
üåê IPs √∫nicos encontrados: {resultado['ips_unicos']}
‚è∞ An√°lise realizada em: {resultado['timestamp_analise']}

üìã DISTRIBUI√á√ÉO POR TIPO:
"""
        
        for tipo, quantidade in resultado['tipos_linhas'].items():
            percentual = (quantidade / resultado['total_linhas']) * 100
            relatorio += f"   ‚Ä¢ {tipo}: {quantidade} linhas ({percentual:.1f}%)\n"
        
        relatorio += f"\nüí° DICAS DE AN√ÅLISE:\n"
        relatorio += f"   ‚Ä¢ Arquivos com muitos IPs √∫nicos podem indicar varredura\n"
        relatorio += f"   ‚Ä¢ Alto volume de TCP pode indicar conex√µes estabelecidas\n"
        relatorio += f"   ‚Ä¢ Tr√°fego UDP √© comum em DNS e streaming\n"
        
        self.texto_estatisticas.setText(relatorio)
        self.tabs.setCurrentIndex(1)  # Mudar para aba de estat√≠sticas
        self.label_status.setText(f"‚úÖ An√°lise conclu√≠da: {os.path.basename(resultado['arquivo'])}")
        
        QMessageBox.information(self, "An√°lise Conclu√≠da", 
                               f"‚úÖ An√°lise do arquivo conclu√≠da!\n\n"
                               f"üìÅ Arquivo: {os.path.basename(resultado['arquivo'])}\n"
                               f"üìä Linhas analisadas: {resultado['total_linhas']:,}\n"
                               f"üåê IPs √∫nicos: {resultado['ips_unicos']}\n"
                               f"üìà Tamanho: {resultado['tamanho_arquivo']:,} bytes")
    
    def atualizar_interfaces(self):
        """Atualiza a lista de interfaces de rede - Multiplataforma"""
        self.combo_interfaces.clear()
        
        try:
            if self.sistema == "Windows":
                # No Windows, adicionar op√ß√£o para detec√ß√£o autom√°tica
                self.combo_interfaces.addItem("Auto-detec√ß√£o", None)
                
                try:
                    from scapy.all import get_windows_if_list
                    interfaces = get_windows_if_list()
                    
                    for interface in interfaces:
                        nome = interface.get('name', '')
                        descricao = interface.get('description', '')
                        if nome:
                            texto = f"{nome} - {descricao}" if descricao else nome
                            self.combo_interfaces.addItem(texto, nome)
                except Exception as e:
                    print(f"Erro ao obter interfaces Windows: {e}")
                    # Fallback para psutil
                    interfaces = psutil.net_if_addrs()
                    for interface in interfaces.keys():
                        self.combo_interfaces.addItem(interface, interface)
            
            else:  # Linux e outros
                self.combo_interfaces.addItem("any", "any")
                interfaces = psutil.net_if_addrs()
                for interface in interfaces.keys():
                    self.combo_interfaces.addItem(interface, interface)
                    
        except Exception as e:
            self.mostrar_erro(f"Erro ao listar interfaces: {e}")
    
    def iniciar_captura(self):
        """Inicia a captura de pacotes - Multiplataforma"""
        interface = self.combo_interfaces.currentData()
        tempo = self.spin_tempo.value()
        
        # Configura√ß√µes espec√≠ficas por plataforma
        if self.sistema == "Windows" and interface == "any":
            interface = None  # Scapy detecta automaticamente no Windows
        
        if self.sistema != "Windows" and not interface:
            self.mostrar_erro("Selecione uma interface de rede")
            return
        
        # Limpar dados anteriores
        self.dados_captura = []
        self.contadores = {'total': 0, 'tcp': 0, 'udp': 0, 'icmp': 0, 'outros': 0}
        self.bytes_total = 0
        self.texto_logs.clear()
        self.lista_alertas.clear()
        
        # Configurar interface
        self.interface_atual = interface
        
        # Iniciar thread de captura
        self.captura_thread = CapturaThread(interface, tempo)
        self.captura_thread.pacote_capturado.connect(self.adicionar_pacote)
        self.captura_thread.captura_finalizada.connect(self.captura_concluida)
        self.captura_thread.erro_captura.connect(self.mostrar_erro)
        
        self.captura_thread.start()
        
        # Atualizar UI
        self.btn_capturar.setEnabled(False)
        self.btn_parar.setEnabled(True)
        self.barra_progresso.setVisible(True)
        self.barra_progresso.setMaximum(tempo)
        self.barra_progresso.setValue(0)
        
        interface_text = interface if interface else "Auto-detec√ß√£o"
        self.label_status.setText(f"üé¨ Capturando na {interface_text}...")
        
        # Timer para atualizar barra de progresso
        self.timer_progresso = QTimer()
        self.timer_progresso.timeout.connect(self.atualizar_progresso)
        self.timer_progresso.start(1000)
        
        self.tempo_inicio = datetime.now()
    
    def parar_captura(self):
        """Para a captura de pacotes"""
        if self.captura_thread and self.captura_thread.isRunning():
            self.captura_thread.capturando = False
            self.captura_thread.terminate()
            self.captura_thread.wait()
        
        self.captura_concluida(self.dados_captura)
    
    def atualizar_progresso(self):
        """Atualiza a barra de progresso da captura"""
        if hasattr(self, 'tempo_inicio'):
            tempo_decorrido = (datetime.now() - self.tempo_inicio).seconds
            self.barra_progresso.setValue(tempo_decorrido)
            
            if tempo_decorrido >= self.spin_tempo.value():
                self.timer_progresso.stop()
    
    def adicionar_pacote(self, info_pacote):
        """Adiciona um pacote capturado √† interface"""
        self.dados_captura.append(info_pacote)
        
        # Atualizar contadores
        self.contadores['total'] += 1
        tipo = info_pacote.get('tipo', 'outros').lower()
        if tipo in self.contadores:
            self.contadores[tipo] += 1
        else:
            self.contadores['outros'] += 1
        
        # Atualizar bytes
        self.bytes_total += info_pacote['tamanho']
        
        # Formatar linha do log
        timestamp = info_pacote['timestamp'].strftime('%H:%M:%S')
        proto_char = 'T' if tipo == 'tcp' else 'U' if tipo == 'udp' else 'I' if tipo == 'icmp' else 'O'
        origem = f"{info_pacote.get('ip_origem', 'N/A')}:{info_pacote.get('porta_origem', '')}"
        destino = f"{info_pacote.get('ip_destino', 'N/A')}:{info_pacote.get('porta_destino', '')}"
        tamanho = info_pacote['tamanho']
        
        linha = f"{timestamp} | {proto_char} | {origem:20} ‚Üí {destino:20} | {tamanho:4}B"
        self.texto_logs.append(linha)
        
        # Manter apenas as √∫ltimas 1000 linhas
        if self.texto_logs.document().lineCount() > 1000:
            cursor = self.texto_logs.textCursor()
            cursor.movePosition(cursor.Start)
            cursor.select(cursor.LineUnderCursor)
            cursor.removeSelectedText()
        
        # Atualizar labels de contador
        self.atualizar_contadores()
        
        # Detectar atividades suspeitas
        self.detectar_anomalias(info_pacote)
    
    def atualizar_contadores(self):
        """Atualiza os contadores na interface"""
        self.label_contador_pacotes.setText(f"üì¶ Pacotes: {self.contadores['total']}")
        self.label_contador_tcp.setText(f"üîó TCP: {self.contadores['tcp']}")
        self.label_contador_udp.setText(f"üì® UDP: {self.contadores['udp']}")
        self.label_contador_icmp.setText(f"üì° ICMP: {self.contadores['icmp']}")
        
        # Calcular taxa de transfer√™ncia
        if hasattr(self, 'tempo_inicio'):
            tempo_decorrido = (datetime.now() - self.tempo_inicio).seconds
            if tempo_decorrido > 0:
                taxa = self.bytes_total / tempo_decorrido
                if taxa > 1024*1024:
                    self.label_taxa_transferencia.setText(f"‚ö° Taxa: {taxa/1024/1024:.2f} MB/s")
                elif taxa > 1024:
                    self.label_taxa_transferencia.setText(f"‚ö° Taxa: {taxa/1024:.2f} KB/s")
                else:
                    self.label_taxa_transferencia.setText(f"‚ö° Taxa: {taxa:.0f} B/s")
    
    def detectar_anomalias(self, pacote):
        """Detecta atividades suspeitas nos pacotes"""
        alertas = []
        
        # Detectar port scanning
        if pacote.get('tipo') == 'TCP' and pacote.get('flags') == 'S':
            # SYN sem outros flags pode indicar port scanning
            alertas.append("SYN scan detectado")
        
        # Detectar tr√°fego suspeito em portas conhecidas
        porta_destino = pacote.get('porta_destino')
        if porta_destino in [21, 22, 23, 25, 53, 80, 443, 3389]:
            # Tr√°fego em portas sens√≠veis
            alertas.append(f"Tr√°fego em porta sens√≠vel: {porta_destino}")
        
        # Adicionar alertas √† lista
        for alerta in alertas:
            item = QListWidgetItem(f"‚ö†Ô∏è {alerta} - {pacote.get('ip_origem', 'N/A')}")
            self.lista_alertas.addItem(item)
    
    def captura_concluida(self, dados):
        """Callback quando a captura √© conclu√≠da"""
        self.btn_capturar.setEnabled(True)
        self.btn_parar.setEnabled(False)
        self.barra_progresso.setVisible(False)
        self.label_status.setText("‚úÖ Captura conclu√≠da")
        
        if hasattr(self, 'timer_progresso') and self.timer_progresso.isActive():
            self.timer_progresso.stop()
        
        # Gerar estat√≠sticas
        self.gerar_estatisticas()
        
        # Mostrar resumo
        QMessageBox.information(self, "Captura Conclu√≠da", 
                               f"‚úÖ Captura finalizada!\n"
                               f"üì¶ Total de pacotes: {len(dados)}\n"
                               f"‚è∞ Dura√ß√£o: {self.spin_tempo.value()}s\n"
                               f"üìä Dados capturados: {self.bytes_total} bytes")
    
    def gerar_estatisticas(self):
        """Gera estat√≠sticas dos dados capturados"""
        if not self.dados_captura:
            self.texto_estatisticas.setText("Nenhum dado dispon√≠vel para an√°lise.")
            return
        
        df = pd.DataFrame(self.dados_captura)
        
        # Estat√≠sticas b√°sicas
        total_pacotes = len(df)
        total_bytes = df['tamanho'].sum()
        tempo_captura = (df['timestamp'].max() - df['timestamp'].min()).total_seconds()
        
        # Estat√≠sticas por protocolo
        stats_protocolo = df['tipo'].value_counts()
        
        # Top IPs
        top_ips_origem = df['ip_origem'].value_counts().head(5) if 'ip_origem' in df.columns else pd.Series()
        top_ips_destino = df['ip_destino'].value_counts().head(5) if 'ip_destino' in df.columns else pd.Series()
        
        # Montar relat√≥rio
        relatorio = f"""üìä RELAT√ìRIO DE CAPTURA

üì¶ ESTAT√çSTICAS GERAIS:
   ‚Ä¢ Total de pacotes: {total_pacotes:,}
   ‚Ä¢ Total de bytes: {total_bytes:,}
   ‚Ä¢ Dura√ß√£o da captura: {tempo_captura:.1f}s
   ‚Ä¢ Taxa m√©dia: {total_bytes/max(tempo_captura,1):.0f} B/s

üö¶ DISTRIBUI√á√ÉO POR PROTOCOLO:"""
        
        for protocolo, count in stats_protocolo.items():
            relatorio += f"\n   ‚Ä¢ {protocolo}: {count} pacotes ({count/total_pacotes*100:.1f}%)"
        
        if not top_ips_origem.empty:
            relatorio += "\n\nüåê TOP IPs DE ORIGEM:"
            for ip, count in top_ips_origem.items():
                relatorio += f"\n   ‚Ä¢ {ip}: {count} pacotes"
        
        if not top_ips_destino.empty:
            relatorio += "\n\nüéØ TOP IPs DE DESTINO:"
            for ip, count in top_ips_destino.items():
                relatorio += f"\n   ‚Ä¢ {ip}: {count} pacotes"
        
        self.texto_estatisticas.setText(relatorio)
    
    def exportar_relatorio(self, formato):
        """Exporta o relat√≥rio para arquivo"""
        if not self.dados_captura:
            self.mostrar_erro("Nenhum dado dispon√≠vel para exportar")
            return
        
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"relatorios/relatorio_{timestamp}"
            
            # Garantir que o diret√≥rio existe
            os.makedirs("relatorios", exist_ok=True)
            
            if formato == 'json':
                # Converter dados para formato serializ√°vel
                dados_serializaveis = []
                for dado in self.dados_captura:
                    dado_serial = dado.copy()
                    dado_serial['timestamp'] = dado['timestamp'].isoformat()
                    dados_serializaveis.append(dado_serial)
                
                with open(f"{filename}.json", 'w', encoding='utf-8') as f:
                    import json
                    json.dump(dados_serializaveis, f, indent=2, ensure_ascii=False)
                
                QMessageBox.information(self, "Exporta√ß√£o Conclu√≠da", 
                                      f"‚úÖ Relat√≥rio exportado como:\n{filename}.json")
            
            elif formato == 'csv':
                df = pd.DataFrame(self.dados_captura)
                df.to_csv(f"{filename}.csv", index=False, encoding='utf-8')
                
                QMessageBox.information(self, "Exporta√ß√£o Conclu√≠da", 
                                      f"‚úÖ Relat√≥rio exportado como:\n{filename}.csv")
        
        except Exception as e:
            self.mostrar_erro(f"Erro ao exportar relat√≥rio: {e}")
    
    def gerar_relatorio_completo(self):
        """Gera um relat√≥rio completo em nova janela"""
        if not self.dados_captura:
            self.mostrar_erro("Nenhum dado dispon√≠vel para relat√≥rio")
            return
        
        dialog = QDialog(self)
        dialog.setWindowTitle("üìã Relat√≥rio Completo")
        dialog.setGeometry(200, 200, 800, 600)
        
        layout = QVBoxLayout(dialog)
        
        texto_relatorio = QTextEdit()
        texto_relatorio.setFont(QFont("Monospace", 9))
        
        # Gerar relat√≥rio detalhado
        relatorio = self.gerar_relatorio_detalhado()
        texto_relatorio.setText(relatorio)
        
        layout.addWidget(texto_relatorio)
        
        # Bot√µes
        botoes = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Save)
        botoes.accepted.connect(dialog.accept)
        botoes.button(QDialogButtonBox.Save).clicked.connect(
            lambda: self.salvar_relatorio(relatorio)
        )
        layout.addWidget(botoes)
        
        dialog.exec_()
    
    def gerar_relatorio_detalhado(self):
        """Gera um relat√≥rio detalhado dos dados"""
        df = pd.DataFrame(self.dados_captura)
        
        relatorio = f"""üöÄ MELTTR√ÅFEGO - RELAT√ìRIO COMPLETO
üìÖ Gerado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üíª Plataforma: {self.sistema}
üåê Interface: {self.interface_atual or 'Auto-detec√ß√£o'}
‚è∞ Dura√ß√£o: {self.spin_tempo.value()} segundos

üìä ESTAT√çSTICAS GERAIS:
   ‚Ä¢ Total de pacotes: {len(df):,}
   ‚Ä¢ Total de bytes: {df['tamanho'].sum():,}
   ‚Ä¢ Pacote m√©dio: {df['tamanho'].mean():.1f} bytes
   ‚Ä¢ Maior pacote: {df['tamanho'].max()} bytes
   ‚Ä¢ Menor pacote: {df['tamanho'].min()} bytes

üìà DISTRIBUI√á√ÉO POR PROTOCOLO:
"""
        
        # Estat√≠sticas por protocolo
        for protocolo, count in df['tipo'].value_counts().items():
            percentual = count / len(df) * 100
            relatorio += f"   ‚Ä¢ {protocolo}: {count} pacotes ({percentual:.1f}%)\n"
        
        # Top IPs
        if 'ip_origem' in df.columns:
            relatorio += "\nüåê TOP 5 IPs DE ORIGEM:\n"
            for ip, count in df['ip_origem'].value_counts().head(5).items():
                relatorio += f"   ‚Ä¢ {ip}: {count} pacotes\n"
        
        if 'ip_destino' in df.columns:
            relatorio += "\nüéØ TOP 5 IPs DE DESTINO:\n"
            for ip, count in df['ip_destino'].value_counts().head(5).items():
                relatorio += f"   ‚Ä¢ {ip}: {count} pacotes\n"
        
        # Portas mais acessadas
        if 'porta_destino' in df.columns:
            relatorio += "\nüî¢ TOP 5 PORTAS DE DESTINO:\n"
            for porta, count in df['porta_destino'].value_counts().head(5).items():
                relatorio += f"   ‚Ä¢ {porta}: {count} conex√µes\n"
        
        # Alertas de seguran√ßa
        relatorio += "\n‚ö†Ô∏è RESUMO DE SEGURAN√áA:\n"
        relatorio += f"   ‚Ä¢ Total de alertas: {self.lista_alertas.count()}\n"
        relatorio += f"   ‚Ä¢ TCP SYNs: {self.contadores['tcp']}\n"
        relatorio += f"   ‚Ä¢ Tr√°fego UDP: {self.contadores['udp']}\n"
        
        return relatorio
    
    def salvar_relatorio(self, conteudo):
        """Salva o relat√≥rio em arquivo de texto"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"relatorios/relatorio_completo_{timestamp}.txt"
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(conteudo)
            
            QMessageBox.information(self, "Relat√≥rio Salvo", 
                                  f"‚úÖ Relat√≥rio salvo como:\n{filename}")
        
        except Exception as e:
            self.mostrar_erro(f"Erro ao salvar relat√≥rio: {e}")
    
    def atualizar_conexoes(self):
        """Atualiza a lista de conex√µes de rede"""
        self.lista_conexoes.clear()
        
        try:
            conexoes = psutil.net_connections()
            
            for conn in conexoes:
                if conn.status == 'ESTABLISHED' and conn.laddr and conn.raddr:
                    item_text = f"{conn.laddr.ip}:{conn.laddr.port} ‚Üî {conn.raddr.ip}:{conn.raddr.port}"
                    item = QListWidgetItem(item_text)
                    self.lista_conexoes.addItem(item)
        
        except Exception as e:
            self.mostrar_erro(f"Erro ao obter conex√µes: {e}")
    
    def atualizar_status_sistema(self):
        """Atualiza as informa√ß√µes do sistema"""
        # Informa√ß√µes de rede
        try:
            info_rede = "üåê ESTAT√çSTICAS DE REDE:\n\n"
            
            # Estat√≠sticas por interface
            io_counters = psutil.net_io_counters(pernic=True)
            for interface, stats in io_counters.items():
                info_rede += f"üì° {interface}:\n"
                info_rede += f"   ‚Üë Enviados: {stats.bytes_sent:,} bytes\n"
                info_rede += f"   ‚Üì Recebidos: {stats.bytes_recv:,} bytes\n"
                info_rede += f"   üì¶ Pacotes enviados: {stats.packets_sent:,}\n"
                info_rede += f"   üì¶ Pacotes recebidos: {stats.packets_recv:,}\n\n"
            
            self.texto_info_rede.setText(info_rede)
        
        except Exception as e:
            self.texto_info_rede.setText(f"Erro ao obter informa√ß√µes de rede: {e}")
        
        # Informa√ß√µes do sistema
        try:
            info_sistema = "üíª INFORMA√á√ïES DO SISTEMA\n\n"
            
            # CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            info_sistema += f"‚ö° CPU: {cpu_percent}% utilizada\n"
            
            # Mem√≥ria
            memoria = psutil.virtual_memory()
            info_sistema += f"üíæ Mem√≥ria: {memoria.percent}% utilizada\n"
            info_sistema += f"   ({memoria.used//1024//1024}MB / {memoria.total//1024//1024}MB)\n\n"
            
            # Load average (apenas Linux/Unix)
            if self.sistema != "Windows":
                load_avg = os.getloadavg()
                info_sistema += f"üìä Load Average: {load_avg[0]:.2f}, {load_avg[1]:.2f}, {load_avg[2]:.2f}\n\n"
            
            # Plataforma
            info_sistema += f"üíª Sistema: {platform.system()} {platform.release()}\n"
            info_sistema += f"üêç Python: {platform.python_version()}\n"
            info_sistema += f"üì¶ Scapy: {scapy.__version__ if 'scapy' in globals() else 'N/A'}\n"
            
            self.texto_info_sistema.setText(info_sistema)
        
        except Exception as e:
            self.texto_info_sistema.setText(f"Erro ao obter informa√ß√µes do sistema: {e}")
    
    def limpar_dados(self):
        """Limpa todos os dados capturados"""
        self.dados_captura = []
        self.contadores = {'total': 0, 'tcp': 0, 'udp': 0, 'icmp': 0, 'outros': 0}
        self.bytes_total = 0
        self.texto_logs.clear()
        self.lista_alertas.clear()
        self.texto_estatisticas.clear()
        self.label_status.setText("üóëÔ∏è Dados limpos")
        QMessageBox.information(self, "Limpeza Conclu√≠da", "‚úÖ Todos os dados foram limpos!")
    
    def mostrar_info_plataforma(self):
        """Mostra informa√ß√µes da plataforma"""
        info = f"""üíª INFORMA√á√ïES DA PLATAFORMA

Sistema: {platform.system()} {platform.release()}
Arquitetura: {platform.architecture()[0]}
Python: {platform.python_version()}

üì¶ DEPEND√äNCIAS:
Scapy: {'‚úÖ' if 'scapy' in sys.modules else '‚ùå'}
Psutil: {'‚úÖ' if 'psutil' in sys.modules else '‚ùå'}
Pandas: {'‚úÖ' if 'pandas' in sys.modules else '‚ùå'}
PyQt5: {'‚úÖ' if 'PyQt5' in sys.modules else '‚ùå'}

üí° CONFIGURA√á√ÉO:
‚Ä¢ Linux: Requer tcpdump e permiss√µes de captura
‚Ä¢ Windows: Requer Npcap instalado
‚Ä¢ Execute como Admin se tiver problemas de permiss√£o
"""
        QMessageBox.information(self, "Informa√ß√µes da Plataforma", info)
    
    def mostrar_erro(self, mensagem):
        """Exibe uma mensagem de erro"""
        QMessageBox.critical(self, "Erro", mensagem)
        self.label_status.setText(f"‚ùå {mensagem[:50]}...")

def main():
    """Fun√ß√£o principal da aplica√ß√£o GUI - Multiplataforma"""
    sistema = platform.system()
    
    # Verifica√ß√µes espec√≠ficas por plataforma
    if sistema == "Windows":
        print("ü™ü Executando MeltTrafego no Windows")
        # Verificar se Npcap est√° instalado
        try:
            import winreg
            key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Npcap")
            winreg.CloseKey(key)
            print("‚úÖ Npcap detectado")
        except:
            print("‚ö†Ô∏è  Npcap n√£o encontrado. A captura pode n√£o funcionar.")
            print("üí° Instale em: https://npcap.com/#download")
    
    elif sistema == "Linux":
        print("üêß Executando MeltTrafego no Linux")
        # Verificar permiss√µes
        if os.geteuid() != 0:
            print("‚ö†Ô∏è  Executando sem privil√©gios de root")
            print("üí° Algumas funcionalidades podem requerer sudo")
    else:
        print(f"üîß Executando MeltTrafego no {sistema}")
    
    app = QApplication(sys.argv)
    app.setApplicationName("MeltTrafego")
    app.setApplicationVersion("2.0")
    
    # Criar e mostrar janela principal
    janela = MeltTrafegoGUI()
    janela.show()
    
    # Executar aplica√ß√£o
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()